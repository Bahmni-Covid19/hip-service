function(config) {

config.logger.info(config.request.body);
config.logger.info(config.request.path + " is called");
var reqBody = JSON.parse(config.request.body);
var reqId = reqBody.requestId;
var token = config.request.headers.Authorization;
var body1 ={
    "requestId": reqId,
    "timestamp": "2021-03-10T11:04:25.454Z",
    "auth": {
        "accessToken": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjNFRjUzMkVGREQ1OEY4NEQxNURDNUFDMjg2NDEyM0E1IiwidHlwIjoiYXQrand0In0.eyJuYmYiOjE2MTYxMzcxNzUsImV4cCI6MTYxNjE0MDc3NSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwIiwiY2xpZW50X2lkIjoiY2xpZW50LWNyZWRlbnRpYWxzLW1vY2stY2xpZW50IiwiY2xpZW50SWQiOiJ0aGlzIGlzIHRoZSBjbGllbnQgaWQgY2xhaW0gdHlwZSIsImp0aSI6IjMwOTU0NzZDQTNCMDU4MjVEMDQzRkFCRjMyQjM1NzBEIiwiaWF0IjoxNjE2MTM3MTc1LCJzY29wZSI6WyJzb21lLWFwcC1zY29wZS0xIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJnYXRld2F5Il19fQ.Kq_HXRJdy-BYAlN0KBRT24Cca0IQs6ZmMJzFUlfTCaUQyFNQu8fKOauTHKxGX4tT2RZhQc9G37-N-ZSzPr5LpgakLB5t4DK_t2jAXypQPXKuhXtlzbaWCJffh0pvjjaSqsRigV-n1PXOIvEJCrDsa2EJObBYYEEw92ERGxpG4sRdESWxPLngbfHfHwZ3cOidipKwDtPLkRSn7XVpeh-BoGqFMxVIigitkx0GWFtM5nWnfgObLVZcSg6W8wvwx1kA3N0FlI6rK3umOx3RQikqFkZVh-tUiZaz3Bs0gkmcX2r5T-n3EFfwBkxcUMNcE-oDD_j1lhtM0rJ2K7Vviosfbw",
        "validity": {
          "purpose": "LINK",
          "requester": {
            "type": "HIP",
            "id": 100005
          },
          "expiry": "2021-03-12T10:42:02.524Z",
          "limit": "1"
        },
        "patient": {
          "id": "<patient-id>@<consent-manager-id>",
          "name": "Hina Patel",
          "gender": "M",
          "yearOfBirth": 2000,
          "address": {
            "line": "string",
            "district": "string",
            "state": "string",
            "pincode": "string"
          },
          "identifiers": [
            {
              "type": "MOBILE",
              "value": "+919800083232"
            }
          ]
        }
      },
    "resp": {
        "requestId": reqId
    }
};
var reqBodyOnFetchModes = JSON.stringify(body1);
var http = require('http');
var options = {
    method: 'POST',
    port: '9052',
    hostname: 'host.docker.internal',
    path: '/v0.5/users/auth/on-confirm',
    json: body1,
    headers: {
        'Content-Type': 'application/json',
        'Authorization': token,
        'content-length': reqBodyOnFetchModes.length,
        'X-HIP-ID': '10000005'
    }
},
httpRequest = http.request(options, response => {
    var body = JSON.parse(body1);
    response.setEncoding('utf8');
    response.on('data', chunk => {
        body += chunk;
    });
    response.on('end', () => {
        var stubResponse = {
            statusCode: response.statusCode,
            headers: response.headers,
            body
        };
        config.logger.info('Successfully proxied: ' + JSON.stringify(stubResponse));
    });
});
httpRequest.write(reqBodyOnFetchModes);
httpRequest.end();

return {
    statusCode: '202',
    headers: {
    'Content-Type': 'application/json'
},
// this is the redacted response that would come from the openid connect mock server, but we need to replace the host in the url,
// so the response is copied here with the updated host and the only entry that is required
body: JSON.stringify(
{
    "Request":'Accepted',
    'code':'202'
}
)
};
}